version: '3'

x-airflow-common: &airflow-common
  image: chickengang/airflow
  build:
    context: ./airflow
    dockerfile: dockerfile
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- apache-airflow-providers-microsoft-mssql}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - airflow_logs:/opt/airflow/logs
    - airflow_plugins:/opt/airflow/plugins
    - airflow_scripts:/opt/airflow/scripts
    - ./spark:/opt/airflow/code
    - ./kafka:/var/lib
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - final-pro


services:
  # Airflow cluster
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - 8080:8080
    restart: always
    command: webserver

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    restart: always
    command: scheduler

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    command: version

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - final-pro
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  # HDFS cluster
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - 9870:9870
      - 9000:9000
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    restart: always
    networks:
      - final-pro
    volumes:
      - hadoop_home:/home
      - hadoop_namenode:/hadoop/dfs/name

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode-1
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    restart: always
    networks:
      - final-pro
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    restart: always
    networks:
      - final-pro
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data

  #spark cluster
  spark-master:
    image: bitnami/spark:3.5
    container_name: spark-master
    hostname: spark-master
    depends_on:
      - namenode
      - datanode
    ports:
      - "9080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - final-pro
    volumes:
      - ./spark:/opt/airflow/code

  spark-worker-1:
    image: bitnami/spark:3.5
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "9081:8080"
      - "7000:7000"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-1
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
    networks:
      - final-pro
    volumes:
      - ./spark:/opt/airflow/code

  spark-worker-2:
    image: bitnami/spark:3.5
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "9082:8080"
      - "7001:7000"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-2
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
    networks:
      - final-pro
    volumes:
      - ./spark:/opt/airflow/code
  flask-service:
    image: chickengang/flask:latest
    container_name: flask-service
    ports:
      - "5000:5000"
    networks:
      - final-pro
    volumes:
      - ./data:/opt/flask/code/data
    command:
      [ "sh", "-c", "python -m flask --app app.py run --host=0.0.0.0 --reload && tail -f /dev/null" ]  
# Other

  kafka-0:
    image: chickengang/kafka:latest
    container_name: kafka-0
    ports:
      - "9092:9092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Clustering
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_NUM_PARTITIONS = 4
    volumes:
      - kafka_0_data:/var/lib/
      - ./kafka:/var/lib
    # command: >
    #   bash -c "
    #   sleep 5 &&
    #   python3 /var/lib/producer.py
    #   "
    networks:
      - final-pro
  kafka-1:
    image: chickengang/kafka:latest
    container_name: kafka-1
    ports:
      - "9093:9092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Clustering
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_NUM_PARTITIONS = 4
    volumes:
      - kafka_1_data:/var/lib/
      - ./kafka:/var/lib
    networks:
      - final-pro
  kafka-2:
    image: chickengang/kafka:latest
    container_name: kafka-2
    ports:
      - "9094:9092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Clustering
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_NUM_PARTITIONS = 4
    volumes:
      - kafka_2_data:/var/lib/
      - ./kafka:/var/lib
    networks:
      - final-pro

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - final-pro

  data-warehouse:
    image: postgres
    container_name: my-warehouse
    environment:
      - POSTGRES_USER=datawarehouse
      - POSTGRES_PASSWORD=datawarehouse
      - POSTGRES_DB=datawarehouse
    ports:
      - 5432:5432
    networks:
      - final-pro
    volumes:
      - data-warehouse:/var/lib/postgresql/data
  # db:
  #   image: pgduckdb/pgduckdb:16-main
  #   container_name: duckDB
  #   ports:
  #     - 5433:5432
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: duckdb
  #   volumes:
  #     - pgduckdb_data:/var/lib/postgresql/data
  #     - ./postgresql.conf:/etc/postgresql/postgresql.conf
  #   command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
  #   restart: always
  #   networks:
  #     - final-pro

networks:
  final-pro:

volumes:
  postgres-db-volume:
  airflow_logs:
  airflow_plugins:
  airflow_scripts:
  hadoop_home:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:
  data-warehouse:
  pgadmin:
  # pgduckdb_data: